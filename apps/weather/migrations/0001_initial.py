# Generated by Django 4.2.23 on 2024-01-01 00:00:00

import uuid

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("users", "0002_user_account_status_user_archived_by_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="WeatherForecast",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("forecast_date", models.DateField()),
                ("forecast_time", models.TimeField()),
                (
                    "temperature",
                    models.DecimalField(
                        decimal_places=1, help_text="Temperature in Celsius", max_digits=4
                    ),
                ),
                (
                    "humidity",
                    models.IntegerField(
                        help_text="Humidity percentage",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "wind_speed",
                    models.DecimalField(
                        decimal_places=1, help_text="Wind speed in km/h", max_digits=4
                    ),
                ),
                (
                    "wind_direction",
                    models.CharField(
                        help_text="Wind direction (N, S, E, W, NE, etc.)", max_length=10
                    ),
                ),
                (
                    "precipitation",
                    models.DecimalField(
                        decimal_places=2, help_text="Precipitation in mm", max_digits=5
                    ),
                ),
                (
                    "pressure",
                    models.DecimalField(
                        decimal_places=2, help_text="Atmospheric pressure in hPa", max_digits=6
                    ),
                ),
                (
                    "weather_condition",
                    models.CharField(
                        choices=[
                            ("CLEAR", "Clear"),
                            ("CLOUDY", "Cloudy"),
                            ("RAINY", "Rainy"),
                            ("STORMY", "Stormy"),
                            ("WINDY", "Windy"),
                            ("FOGGY", "Foggy"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "visibility",
                    models.DecimalField(
                        decimal_places=1, help_text="Visibility in km", max_digits=4
                    ),
                ),
                (
                    "tide_condition",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("LOW_TIDE", "Low Tide"),
                            ("RISING_TIDE", "Rising Tide"),
                            ("HIGH_TIDE", "High Tide"),
                            ("FALLING_TIDE", "Falling Tide"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "tide_height",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Tide height in meters",
                        max_digits=4,
                        null=True,
                    ),
                ),
                (
                    "api_source",
                    models.CharField(
                        choices=[
                            ("OPENWEATHER", "OpenWeather"),
                            ("WEATHERAPI", "WeatherAPI"),
                            ("ACCUWEATHER", "AccuWeather"),
                            ("METEO", "Meteo"),
                        ],
                        max_length=20,
                    ),
                ),
                ("api_response_data", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                # (
                #     "site",
                #     models.ForeignKey(
                #         on_delete=django.db.models.deletion.CASCADE,
                #         related_name="weather_forecasts",
                #         to="locations.site",
                #     ),
                # ),
            ],
            options={
                "verbose_name": "Weather Forecast",
                "verbose_name_plural": "Weather Forecasts",
                "ordering": ["forecast_date", "forecast_time"],
                "unique_together": {("site", "forecast_date", "forecast_time")},
            },
        ),
        migrations.CreateModel(
            name="FieldWorkSchedule",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("planned_date", models.DateField()),
                ("planned_start_time", models.TimeField()),
                ("planned_end_time", models.TimeField()),
                ("actual_start_time", models.TimeField(blank=True, null=True)),
                ("actual_end_time", models.TimeField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PLANNED", "Planned"),
                            ("CONFIRMED", "Confirmed"),
                            ("IN_PROGRESS", "In Progress"),
                            ("COMPLETED", "Completed"),
                            ("CANCELLED", "Cancelled"),
                            ("POSTPONED", "Postponed"),
                        ],
                        default="PLANNED",
                        max_length=20,
                    ),
                ),
                (
                    "weather_score",
                    models.IntegerField(
                        blank=True, help_text="Weather suitability score (0-100)", null=True
                    ),
                ),
                (
                    "weather_recommendation",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("EXCELLENT", "Excellent"),
                            ("GOOD", "Good"),
                            ("MODERATE", "Moderate"),
                            ("POOR", "Poor"),
                            ("NOT_RECOMMENDED", "Not Recommended"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                ("planning_notes", models.TextField(blank=True)),
                ("execution_notes", models.TextField(blank=True)),
                ("results_summary", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "assigned_personnel",
                    models.ManyToManyField(related_name="assigned_field_work", to="users.user"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_field_work",
                        to="users.user",
                    ),
                ),
                # (
                #     "site",
                #     models.ForeignKey(
                #         on_delete=django.db.models.deletion.CASCADE,
                #         related_name="field_work_schedules",
                #         to="locations.site",
                #     ),
                # ),
                (
                    "supervisor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="supervised_field_work",
                        to="users.user",
                    ),
                ),
            ],
            options={
                "verbose_name": "Field Work Schedule",
                "verbose_name_plural": "Field Work Schedules",
                "ordering": ["planned_date", "planned_start_time"],
            },
        ),
        migrations.CreateModel(
            name="WeatherAlert",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "alert_type",
                    models.CharField(
                        choices=[
                            ("WEATHER", "Weather"),
                            ("TIDE", "Tide"),
                            ("WIND", "Wind"),
                            ("VISIBILITY", "Visibility"),
                            ("GENERAL", "General"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("LOW", "Low"),
                            ("MEDIUM", "Medium"),
                            ("HIGH", "High"),
                            ("CRITICAL", "Critical"),
                        ],
                        max_length=20,
                    ),
                ),
                ("valid_from", models.DateTimeField()),
                ("valid_until", models.DateTimeField()),
                ("issued_at", models.DateTimeField(auto_now_add=True)),
                ("source", models.CharField(blank=True, max_length=50)),
                ("external_id", models.CharField(blank=True, max_length=100)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                # (
                #     "sites",
                #     models.ManyToManyField(related_name="weather_alerts", to="locations.site"),
                # ),
            ],
            options={
                "verbose_name": "Weather Alert",
                "verbose_name_plural": "Weather Alerts",
                "ordering": ["-issued_at", "severity"],
            },
        ),
        migrations.AddIndex(
            model_name="weatherforecast",
            index=models.Index(
                fields=["site", "forecast_date"], name="weather_wea_site_id_123456_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="weatherforecast",
            index=models.Index(
                fields=["forecast_date", "weather_condition"], name="weather_wea_forecas_123456_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="weatherforecast",
            index=models.Index(
                fields=["api_source", "created_at"], name="weather_wea_api_so_123456_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="fieldworkschedule",
            index=models.Index(
                fields=["site", "planned_date"], name="weather_fiel_site_id_123456_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="fieldworkschedule",
            index=models.Index(
                fields=["status", "planned_date"], name="weather_fiel_status_123456_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="weatheralert",
            index=models.Index(
                fields=["alert_type", "severity"], name="weather_wea_alert__123456_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="weatheralert",
            index=models.Index(
                fields=["valid_from", "valid_until"], name="weather_wea_valid_f_123456_idx"
            ),
        ),
    ]
