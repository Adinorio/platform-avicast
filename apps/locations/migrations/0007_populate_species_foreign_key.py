# Generated by Django 4.2.23 on 2025-09-24 03:21

from django.db import migrations


def populate_species_foreign_key(apps, schema_editor):
    """Populate the species foreign key based on existing species_name values"""
    SpeciesObservation = apps.get_model('locations', 'SpeciesObservation')
    Species = apps.get_model('fauna', 'Species')
    
    # Get all species observations that don't have a species foreign key
    observations = SpeciesObservation.objects.filter(species__isnull=True)
    
    for obs in observations:
        # Try to find matching species by name
        species_name = obs.species_name.strip()
        
        # Try exact match first
        species = Species.objects.filter(name__iexact=species_name).first()
        
        if not species:
            # Try scientific name match
            species = Species.objects.filter(scientific_name__iexact=species_name).first()
        
        if not species:
            # Try partial match
            species = Species.objects.filter(name__icontains=species_name).first()
        
        if species:
            obs.species = species
            obs.save()
            print(f"Linked {obs.species_name} to {species.name}")
        else:
            print(f"No species found for: {obs.species_name}")


def reverse_populate_species_foreign_key(apps, schema_editor):
    """Reverse migration - clear species foreign key"""
    SpeciesObservation = apps.get_model('locations', 'SpeciesObservation')
    SpeciesObservation.objects.update(species=None)


class Migration(migrations.Migration):

    dependencies = [
        ('locations', '0006_add_species_foreign_key'),
        ('fauna', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(
            populate_species_foreign_key,
            reverse_populate_species_foreign_key,
        ),
    ]
